{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gerador de dados fakes validados por Schema","text":"<ul> <li>github</li> </ul> <p>Gerador de dados fakes que podem ser validados por um Schema (<code>pydantic.BaseModel</code>).</p> <p><code>generate_items</code> </p> <p>Gera lista de itens utilizando um gerador (generator) e que pode ser validado por um schema (BaseModel)</p> <p>Parameters:</p> Name Type Description Default <code>nrows</code> <code>int</code> <p>n\u00famero de items a serem gerados</p> required <code>generator</code> <code>Callable</code> <p>gerador de item</p> required <code>schema</code> <code>None | BaseModel</code> <p>esquema a ser usado para valida\u00e7\u00e3o dos dados gerados, se None -&gt; skip validation. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Tuple[List, List]</code> <p>Tuple[List, List]: Lista contendo os erros (valida\u00e7\u00e3o esquema incorreta) e lista de resultados (items gerados)</p> Source code in <code>src\\fakedatager.py</code> <pre><code>def generate_items(nrows: int, generator: Callable, schema: None | BaseModel = None) -&gt; Tuple[List, List]:\n    \"\"\"\n    Gera lista de itens utilizando um gerador (generator) e que pode ser validado por um schema (BaseModel)\n\n    Args:\n        nrows (int): n\u00famero de items a serem gerados\n        generator (Callable): gerador de item\n        schema (None | BaseModel, optional): esquema a ser usado para valida\u00e7\u00e3o dos dados gerados, se None -&gt; skip validation. Defaults to None.\n\n    Returns:\n        Tuple[List, List]: Lista contendo os erros (valida\u00e7\u00e3o esquema incorreta) e lista de resultados (items gerados)\n    \"\"\"\n    error = []\n    rows = []\n    for i in range(nrows):\n        row = generate_cliente()\n\n        if schema:\n            try:\n                row = SchemaCliente(**row)\n            except ValidationError as e:\n                error.append(e)\n\n        rows.append(row)\n\n    return error, rows\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#schema-validador-schemacliente","title":"Schema (validador) - SchemaCliente","text":"<p>             Bases: <code>BaseModel</code></p> <p>Esquema para representar um cliente.</p> <p>Attributes:</p> Name Type Description <code>uf</code> <code>str</code> <p>Estado de resid\u00eancia do cliente.</p> <code>nome</code> <code>str</code> <p>Nome do cliente.</p> <code>categoria</code> <code>List[Categoria]</code> <p>Lista de categorias do cliente.</p> <code>categoria_2</code> <code>List[Categoria2]</code> <p>Lista de categorias adicionais do cliente.</p> <code>unidades</code> <code>(int, opcional)</code> <p>N\u00famero de unidades relacionadas ao cliente (por padr\u00e3o 0).</p> <code>tamanho</code> <code>(float, opcional)</code> <p>Tamanho do cliente, deve estar entre 0 e 20 (por padr\u00e3o 0).</p> Source code in <code>src\\fakedatager.py</code> <pre><code>class SchemaCliente(BaseModel):\n    \"\"\"\n    Esquema para representar um cliente.\n\n    Attributes:\n        uf (str): Estado de resid\u00eancia do cliente.\n        nome (str): Nome do cliente.\n        categoria (List[Categoria]): Lista de categorias do cliente.\n        categoria_2 (List[Categoria2]): Lista de categorias adicionais do cliente.\n        unidades (int, opcional): N\u00famero de unidades relacionadas ao cliente (por padr\u00e3o 0).\n        tamanho (float, opcional): Tamanho do cliente, deve estar entre 0 e 20 (por padr\u00e3o 0).\n\n    \"\"\"\n    uf: str\n    nome: str\n    categoria: str\n    categoria_2: str\n    unidades: int = Field(ge=0)\n    tamanho: float =  Field(ge=0, le=20)\n\n    @field_validator('categoria')\n    def validar_categoria(categoria):\n        categorias = set(item.value for item in Categoria)\n        if categoria in categorias:\n            return categoria\n        else: \n            raise Exception(\"categoria n\u00e3o definida\")\n\n    @field_validator('categoria_2')\n    def validar_categoria_2(categoria):\n        categorias = set(item.value for item in Categoria2)\n        if categoria in categorias:\n            return categoria\n        else: \n            raise Exception(\"categoria_2 n\u00e3o definida\")\n</code></pre>"},{"location":"#generator-generate_cliente","title":"Generator - generate_cliente","text":"<p>Gera cliente aleat\u00f3rio</p> <p>Returns:</p> Name Type Description <code>dict</code> <p>Um dicion\u00e1rio representando um cliente aleat\u00f3rio com as seguintes chaves: - 'uf': Estado de resid\u00eancia do cliente (string). - 'nome': Nome do cliente (string). - 'categoria': Categoria do cliente (string). - 'categoria_2': Categoria adicional do cliente (string). - 'unidades': N\u00famero de unidades relacionadas ao cliente (inteiro). - 'tamanho': Tamanho do cliente (float).</p> Source code in <code>src\\fakedatager.py</code> <pre><code>def generate_cliente():\n    \"\"\"\n    Gera cliente aleat\u00f3rio\n\n    Returns:\n        dict: Um dicion\u00e1rio representando um cliente aleat\u00f3rio com as seguintes chaves:\n            - 'uf': Estado de resid\u00eancia do cliente (string).\n            - 'nome': Nome do cliente (string).\n            - 'categoria': Categoria do cliente (string).\n            - 'categoria_2': Categoria adicional do cliente (string).\n            - 'unidades': N\u00famero de unidades relacionadas ao cliente (inteiro).\n            - 'tamanho': Tamanho do cliente (float).\n    \"\"\"\n    cliente = dict(\n        uf=fake.estado()[0],\n        nome= fake.name(),\n        categoria= random.choice(list(Categoria)).value,\n        categoria_2= random.choice(list(Categoria2)).value,\n        unidades= random.randrange(1, 6),\n        tamanho= random.uniform(0, 12),\n    )\n    return cliente\n</code></pre>"},{"location":"#gerar-n-item-validar-criar-pandasdataframe-e-salvar-em-csv","title":"Gerar n item; validar; criar pandas.DataFrame e salvar em csv:","text":"<pre><code>    import pandas as pd\n\n    from src.fakedatager import SchemaCliente, generate_cliente, generate_items\n\n    if __name__ == \"__main__\":\n        _, items = generate_items(130, generate_cliente, SchemaCliente) ## return: error, df\n        df = pd.DataFrame([dict(x) for x in items])\n\n        print(df.head())\n        df.to_csv('data/rand_df.csv', index=False)\n\n</code></pre>"}]}